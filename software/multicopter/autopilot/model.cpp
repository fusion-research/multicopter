/* C++ backend for high-performance evaluation of model dynamics and jacobians. */
#include <iostream>
#include <cmath>
#include "model.hpp"

// Places n state derivatives into D, given a sequence of n states X and n inputs U
extern "C" int F(uint n, double X[][13], double U[][6], double D[][13]){
    for(uint i=0; i<n; ++i){
        D[i][0] = (1 - 2*pow(X[i][4],2) - 2*pow(X[i][5],2))*X[i][7] + 2*(X[i][6]*(-(X[i][5]*X[i][8]) + X[i][4]*X[i][9]) + X[i][3]*(X[i][4]*X[i][8] + X[i][5]*X[i][9]));
        D[i][1] = X[i][8] - 2*pow(X[i][3],2)*X[i][8] - 2*pow(X[i][5],2)*X[i][8] + 2*X[i][5]*(X[i][6]*X[i][7] + X[i][4]*X[i][9]) + 2*X[i][3]*(X[i][4]*X[i][7] - X[i][6]*X[i][9]);
        D[i][2] = X[i][4]*(-2*X[i][6]*X[i][7] + 2*X[i][5]*X[i][8]) + 2*X[i][3]*(X[i][5]*X[i][7] + X[i][6]*X[i][8]) + X[i][9] - 2*pow(X[i][3],2)*X[i][9] - 2*pow(X[i][4],2)*X[i][9];
        D[i][3] = 0.5*(X[i][6]*X[i][10] - X[i][5]*X[i][11] + X[i][4]*X[i][12]);
        D[i][4] = 0.5*(X[i][5]*X[i][10] + X[i][6]*X[i][11] - X[i][3]*X[i][12]);
        D[i][5] = 0.5*(-(X[i][4]*X[i][10]) + X[i][3]*X[i][11] + X[i][6]*X[i][12]);
        D[i][6] = -0.5*X[i][3]*X[i][10] - 0.5*X[i][4]*X[i][11] - 0.5*X[i][5]*X[i][12];
        D[i][7] = (p0*U[i][0] + p1*U[i][1] + p2*U[i][2] + p3*U[i][3] + p4*U[i][4] + p5*U[i][5] + p51*(p48 + 2*p49*X[i][3]*X[i][4] - 2*p48*pow(X[i][4],2) + 2*p50*X[i][3]*X[i][5] - 2*p48*pow(X[i][5],2) - 2*p50*X[i][4]*X[i][6] + 2*p49*X[i][5]*X[i][6]) - p42*X[i][7])/p51;
        D[i][8] = (p6*U[i][0] + p7*U[i][1] + p8*U[i][2] + p9*U[i][3] + p10*U[i][4] + p11*U[i][5] + p51*(p49 - 2*p49*pow(X[i][3],2) + 2*p48*X[i][3]*X[i][4] + 2*p50*X[i][4]*X[i][5] - 2*p49*pow(X[i][5],2) + 2*p50*X[i][3]*X[i][6] - 2*p48*X[i][5]*X[i][6]) - p43*X[i][8])/p51;
        D[i][9] = (p12*U[i][0] + p13*U[i][1] + p14*U[i][2] + p15*U[i][3] + p16*U[i][4] + p17*U[i][5] + p51*(p50 - 2*p50*pow(X[i][3],2) - 2*p50*pow(X[i][4],2) + 2*p48*X[i][3]*X[i][5] + 2*p49*X[i][4]*X[i][5] - 2*p49*X[i][3]*X[i][6] + 2*p48*X[i][4]*X[i][6]) - p44*X[i][9])/p51;
        D[i][10] = ((-(p54*p55) + p53*p56)*(p30*U[i][0] + p12*p36*U[i][0] + p31*U[i][1] + p13*p37*U[i][1] + p32*U[i][2] + p14*p38*U[i][2] + p33*U[i][3] + p15*p39*U[i][3] + p34*U[i][4] + p16*p40*U[i][4] + p35*U[i][5] + p17*p41*U[i][5] - p53*pow(X[i][10],2) + p52*X[i][10]*X[i][11] - p55*X[i][10]*X[i][11] + p53*pow(X[i][11],2) - p47*X[i][12] - p56*X[i][10]*X[i][12] + p54*X[i][11]*X[i][12]) + (p54*p56 - p53*p57)*(p24*U[i][0] + p36*p6*U[i][0] + p25*U[i][1] + p37*p7*U[i][1] + p26*U[i][2] + p38*p8*U[i][2] + p27*U[i][3] + p39*p9*U[i][3] + p28*U[i][4] + p10*p40*U[i][4] + p29*U[i][5] + p11*p41*U[i][5] + p54*pow(X[i][10],2) - p46*X[i][11] + p56*X[i][10]*X[i][11] - p52*X[i][10]*X[i][12] + p57*X[i][10]*X[i][12] - p53*X[i][11]*X[i][12] - p54*pow(X[i][12],2)) + (-pow(p56,2) + p55*p57)*(p18*U[i][0] + p0*p36*U[i][0] + p19*U[i][1] + p1*p37*U[i][1] + p20*U[i][2] + p2*p38*U[i][2] + p21*U[i][3] + p3*p39*U[i][3] + p22*U[i][4] + p4*p40*U[i][4] + p23*U[i][5] + p41*p5*U[i][5] - p45*X[i][10] - p54*X[i][10]*X[i][11] - p56*pow(X[i][11],2) + p53*X[i][10]*X[i][12] + p55*X[i][11]*X[i][12] - p57*X[i][11]*X[i][12] + p56*pow(X[i][12],2)))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
        D[i][11] = ((p53*p54 - p52*p56)*(p30*U[i][0] + p12*p36*U[i][0] + p31*U[i][1] + p13*p37*U[i][1] + p32*U[i][2] + p14*p38*U[i][2] + p33*U[i][3] + p15*p39*U[i][3] + p34*U[i][4] + p16*p40*U[i][4] + p35*U[i][5] + p17*p41*U[i][5] - p53*pow(X[i][10],2) + p52*X[i][10]*X[i][11] - p55*X[i][10]*X[i][11] + p53*pow(X[i][11],2) - p47*X[i][12] - p56*X[i][10]*X[i][12] + p54*X[i][11]*X[i][12]) + (-pow(p54,2) + p52*p57)*(p24*U[i][0] + p36*p6*U[i][0] + p25*U[i][1] + p37*p7*U[i][1] + p26*U[i][2] + p38*p8*U[i][2] + p27*U[i][3] + p39*p9*U[i][3] + p28*U[i][4] + p10*p40*U[i][4] + p29*U[i][5] + p11*p41*U[i][5] + p54*pow(X[i][10],2) - p46*X[i][11] + p56*X[i][10]*X[i][11] - p52*X[i][10]*X[i][12] + p57*X[i][10]*X[i][12] - p53*X[i][11]*X[i][12] - p54*pow(X[i][12],2)) + (p54*p56 - p53*p57)*(p18*U[i][0] + p0*p36*U[i][0] + p19*U[i][1] + p1*p37*U[i][1] + p20*U[i][2] + p2*p38*U[i][2] + p21*U[i][3] + p3*p39*U[i][3] + p22*U[i][4] + p4*p40*U[i][4] + p23*U[i][5] + p41*p5*U[i][5] - p45*X[i][10] - p54*X[i][10]*X[i][11] - p56*pow(X[i][11],2) + p53*X[i][10]*X[i][12] + p55*X[i][11]*X[i][12] - p57*X[i][11]*X[i][12] + p56*pow(X[i][12],2)))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
        D[i][12] = ((-pow(p53,2) + p52*p55)*(p30*U[i][0] + p12*p36*U[i][0] + p31*U[i][1] + p13*p37*U[i][1] + p32*U[i][2] + p14*p38*U[i][2] + p33*U[i][3] + p15*p39*U[i][3] + p34*U[i][4] + p16*p40*U[i][4] + p35*U[i][5] + p17*p41*U[i][5] - p53*pow(X[i][10],2) + p52*X[i][10]*X[i][11] - p55*X[i][10]*X[i][11] + p53*pow(X[i][11],2) - p47*X[i][12] - p56*X[i][10]*X[i][12] + p54*X[i][11]*X[i][12]) + (p53*p54 - p52*p56)*(p24*U[i][0] + p36*p6*U[i][0] + p25*U[i][1] + p37*p7*U[i][1] + p26*U[i][2] + p38*p8*U[i][2] + p27*U[i][3] + p39*p9*U[i][3] + p28*U[i][4] + p10*p40*U[i][4] + p29*U[i][5] + p11*p41*U[i][5] + p54*pow(X[i][10],2) - p46*X[i][11] + p56*X[i][10]*X[i][11] - p52*X[i][10]*X[i][12] + p57*X[i][10]*X[i][12] - p53*X[i][11]*X[i][12] - p54*pow(X[i][12],2)) + (-(p54*p55) + p53*p56)*(p18*U[i][0] + p0*p36*U[i][0] + p19*U[i][1] + p1*p37*U[i][1] + p20*U[i][2] + p2*p38*U[i][2] + p21*U[i][3] + p3*p39*U[i][3] + p22*U[i][4] + p4*p40*U[i][4] + p23*U[i][5] + p41*p5*U[i][5] - p45*X[i][10] - p54*X[i][10]*X[i][11] - p56*pow(X[i][11],2) + p53*X[i][10]*X[i][12] + p55*X[i][11]*X[i][12] - p57*X[i][11]*X[i][12] + p56*pow(X[i][12],2)))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    }
    return 0;
}

// Places n dynamics state-jacobians into D, given a sequence of n states X and n inputs U
extern "C" int dFdX(uint n, double X[][13], double U[][6], double D[][13][13]){
    for(uint i=0; i<n; ++i){
        D[i][0][0] = 0;
        D[i][0][1] = 0;
        D[i][0][2] = 0;
        D[i][0][3] = 2*(X[i][4]*X[i][8] + X[i][5]*X[i][9]);
        D[i][0][4] = -4*X[i][4]*X[i][7] + 2*(X[i][3]*X[i][8] + X[i][6]*X[i][9]);
        D[i][0][5] = -4*X[i][5]*X[i][7] + 2*(-(X[i][6]*X[i][8]) + X[i][3]*X[i][9]);
        D[i][0][6] = 2*(-(X[i][5]*X[i][8]) + X[i][4]*X[i][9]);
        D[i][0][7] = 1 - 2*pow(X[i][4],2) - 2*pow(X[i][5],2);
        D[i][0][8] = 2*(X[i][3]*X[i][4] - X[i][5]*X[i][6]);
        D[i][0][9] = 2*(X[i][3]*X[i][5] + X[i][4]*X[i][6]);
        D[i][0][10] = 0;
        D[i][0][11] = 0;
        D[i][0][12] = 0;
        D[i][1][0] = 0;
        D[i][1][1] = 0;
        D[i][1][2] = 0;
        D[i][1][3] = -4*X[i][3]*X[i][8] + 2*(X[i][4]*X[i][7] - X[i][6]*X[i][9]);
        D[i][1][4] = 2*X[i][3]*X[i][7] + 2*X[i][5]*X[i][9];
        D[i][1][5] = -4*X[i][5]*X[i][8] + 2*(X[i][6]*X[i][7] + X[i][4]*X[i][9]);
        D[i][1][6] = 2*X[i][5]*X[i][7] - 2*X[i][3]*X[i][9];
        D[i][1][7] = 2*X[i][3]*X[i][4] + 2*X[i][5]*X[i][6];
        D[i][1][8] = 1 - 2*pow(X[i][3],2) - 2*pow(X[i][5],2);
        D[i][1][9] = 2*X[i][4]*X[i][5] - 2*X[i][3]*X[i][6];
        D[i][1][10] = 0;
        D[i][1][11] = 0;
        D[i][1][12] = 0;
        D[i][2][0] = 0;
        D[i][2][1] = 0;
        D[i][2][2] = 0;
        D[i][2][3] = 2*(X[i][5]*X[i][7] + X[i][6]*X[i][8]) - 4*X[i][3]*X[i][9];
        D[i][2][4] = -2*X[i][6]*X[i][7] + 2*X[i][5]*X[i][8] - 4*X[i][4]*X[i][9];
        D[i][2][5] = 2*X[i][3]*X[i][7] + 2*X[i][4]*X[i][8];
        D[i][2][6] = -2*X[i][4]*X[i][7] + 2*X[i][3]*X[i][8];
        D[i][2][7] = 2*X[i][3]*X[i][5] - 2*X[i][4]*X[i][6];
        D[i][2][8] = 2*X[i][4]*X[i][5] + 2*X[i][3]*X[i][6];
        D[i][2][9] = 1 - 2*pow(X[i][3],2) - 2*pow(X[i][4],2);
        D[i][2][10] = 0;
        D[i][2][11] = 0;
        D[i][2][12] = 0;
        D[i][3][0] = 0;
        D[i][3][1] = 0;
        D[i][3][2] = 0;
        D[i][3][3] = 0;
        D[i][3][4] = 0.5*X[i][12];
        D[i][3][5] = -0.5*X[i][11];
        D[i][3][6] = 0.5*X[i][10];
        D[i][3][7] = 0;
        D[i][3][8] = 0;
        D[i][3][9] = 0;
        D[i][3][10] = 0.5*X[i][6];
        D[i][3][11] = -0.5*X[i][5];
        D[i][3][12] = 0.5*X[i][4];
        D[i][4][0] = 0;
        D[i][4][1] = 0;
        D[i][4][2] = 0;
        D[i][4][3] = -0.5*X[i][12];
        D[i][4][4] = 0;
        D[i][4][5] = 0.5*X[i][10];
        D[i][4][6] = 0.5*X[i][11];
        D[i][4][7] = 0;
        D[i][4][8] = 0;
        D[i][4][9] = 0;
        D[i][4][10] = 0.5*X[i][5];
        D[i][4][11] = 0.5*X[i][6];
        D[i][4][12] = -0.5*X[i][3];
        D[i][5][0] = 0;
        D[i][5][1] = 0;
        D[i][5][2] = 0;
        D[i][5][3] = 0.5*X[i][11];
        D[i][5][4] = -0.5*X[i][10];
        D[i][5][5] = 0;
        D[i][5][6] = 0.5*X[i][12];
        D[i][5][7] = 0;
        D[i][5][8] = 0;
        D[i][5][9] = 0;
        D[i][5][10] = -0.5*X[i][4];
        D[i][5][11] = 0.5*X[i][3];
        D[i][5][12] = 0.5*X[i][6];
        D[i][6][0] = 0;
        D[i][6][1] = 0;
        D[i][6][2] = 0;
        D[i][6][3] = -0.5*X[i][10];
        D[i][6][4] = -0.5*X[i][11];
        D[i][6][5] = -0.5*X[i][12];
        D[i][6][6] = 0;
        D[i][6][7] = 0;
        D[i][6][8] = 0;
        D[i][6][9] = 0;
        D[i][6][10] = -0.5*X[i][3];
        D[i][6][11] = -0.5*X[i][4];
        D[i][6][12] = -0.5*X[i][5];
        D[i][7][0] = 0;
        D[i][7][1] = 0;
        D[i][7][2] = 0;
        D[i][7][3] = 2*p49*X[i][4] + 2*p50*X[i][5];
        D[i][7][4] = 2*p49*X[i][3] - 4*p48*X[i][4] - 2*p50*X[i][6];
        D[i][7][5] = 2*p50*X[i][3] - 4*p48*X[i][5] + 2*p49*X[i][6];
        D[i][7][6] = -2*p50*X[i][4] + 2*p49*X[i][5];
        D[i][7][7] = -(p42/p51);
        D[i][7][8] = 0;
        D[i][7][9] = 0;
        D[i][7][10] = 0;
        D[i][7][11] = 0;
        D[i][7][12] = 0;
        D[i][8][0] = 0;
        D[i][8][1] = 0;
        D[i][8][2] = 0;
        D[i][8][3] = -4*p49*X[i][3] + 2*p48*X[i][4] + 2*p50*X[i][6];
        D[i][8][4] = 2*p48*X[i][3] + 2*p50*X[i][5];
        D[i][8][5] = 2*p50*X[i][4] - 4*p49*X[i][5] - 2*p48*X[i][6];
        D[i][8][6] = 2*p50*X[i][3] - 2*p48*X[i][5];
        D[i][8][7] = 0;
        D[i][8][8] = -(p43/p51);
        D[i][8][9] = 0;
        D[i][8][10] = 0;
        D[i][8][11] = 0;
        D[i][8][12] = 0;
        D[i][9][0] = 0;
        D[i][9][1] = 0;
        D[i][9][2] = 0;
        D[i][9][3] = -4*p50*X[i][3] + 2*p48*X[i][5] - 2*p49*X[i][6];
        D[i][9][4] = -4*p50*X[i][4] + 2*p49*X[i][5] + 2*p48*X[i][6];
        D[i][9][5] = 2*p48*X[i][3] + 2*p49*X[i][4];
        D[i][9][6] = -2*p49*X[i][3] + 2*p48*X[i][4];
        D[i][9][7] = 0;
        D[i][9][8] = 0;
        D[i][9][9] = -(p44/p51);
        D[i][9][10] = 0;
        D[i][9][11] = 0;
        D[i][9][12] = 0;
        D[i][10][0] = 0;
        D[i][10][1] = 0;
        D[i][10][2] = 0;
        D[i][10][3] = 0;
        D[i][10][4] = 0;
        D[i][10][5] = 0;
        D[i][10][6] = 0;
        D[i][10][7] = 0;
        D[i][10][8] = 0;
        D[i][10][9] = 0;
        D[i][10][10] = ((-pow(p56,2) + p55*p57)*(-p45 - p54*X[i][11] + p53*X[i][12]) + (-(p54*p55) + p53*p56)*(-2*p53*X[i][10] + p52*X[i][11] - p55*X[i][11] - p56*X[i][12]) + (p54*p56 - p53*p57)*(2*p54*X[i][10] + p56*X[i][11] - p52*X[i][12] + p57*X[i][12]))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
        D[i][10][11] = ((p54*p56 - p53*p57)*(-p46 + p56*X[i][10] - p53*X[i][12]) + (-(p54*p55) + p53*p56)*(p52*X[i][10] - p55*X[i][10] + 2*p53*X[i][11] + p54*X[i][12]) + (-pow(p56,2) + p55*p57)*(-(p54*X[i][10]) - 2*p56*X[i][11] + p55*X[i][12] - p57*X[i][12]))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
        D[i][10][12] = ((-(p54*p55) + p53*p56)*(-p47 - p56*X[i][10] + p54*X[i][11]) + (p54*p56 - p53*p57)*(-(p52*X[i][10]) + p57*X[i][10] - p53*X[i][11] - 2*p54*X[i][12]) + (-pow(p56,2) + p55*p57)*(p53*X[i][10] + p55*X[i][11] - p57*X[i][11] + 2*p56*X[i][12]))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
        D[i][11][0] = 0;
        D[i][11][1] = 0;
        D[i][11][2] = 0;
        D[i][11][3] = 0;
        D[i][11][4] = 0;
        D[i][11][5] = 0;
        D[i][11][6] = 0;
        D[i][11][7] = 0;
        D[i][11][8] = 0;
        D[i][11][9] = 0;
        D[i][11][10] = ((p54*p56 - p53*p57)*(-p45 - p54*X[i][11] + p53*X[i][12]) + (p53*p54 - p52*p56)*(-2*p53*X[i][10] + p52*X[i][11] - p55*X[i][11] - p56*X[i][12]) + (-pow(p54,2) + p52*p57)*(2*p54*X[i][10] + p56*X[i][11] - p52*X[i][12] + p57*X[i][12]))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
        D[i][11][11] = ((-pow(p54,2) + p52*p57)*(-p46 + p56*X[i][10] - p53*X[i][12]) + (p53*p54 - p52*p56)*(p52*X[i][10] - p55*X[i][10] + 2*p53*X[i][11] + p54*X[i][12]) + (p54*p56 - p53*p57)*(-(p54*X[i][10]) - 2*p56*X[i][11] + p55*X[i][12] - p57*X[i][12]))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
        D[i][11][12] = ((p53*p54 - p52*p56)*(-p47 - p56*X[i][10] + p54*X[i][11]) + (-pow(p54,2) + p52*p57)*(-(p52*X[i][10]) + p57*X[i][10] - p53*X[i][11] - 2*p54*X[i][12]) + (p54*p56 - p53*p57)*(p53*X[i][10] + p55*X[i][11] - p57*X[i][11] + 2*p56*X[i][12]))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
        D[i][12][0] = 0;
        D[i][12][1] = 0;
        D[i][12][2] = 0;
        D[i][12][3] = 0;
        D[i][12][4] = 0;
        D[i][12][5] = 0;
        D[i][12][6] = 0;
        D[i][12][7] = 0;
        D[i][12][8] = 0;
        D[i][12][9] = 0;
        D[i][12][10] = ((-(p54*p55) + p53*p56)*(-p45 - p54*X[i][11] + p53*X[i][12]) + (-pow(p53,2) + p52*p55)*(-2*p53*X[i][10] + p52*X[i][11] - p55*X[i][11] - p56*X[i][12]) + (p53*p54 - p52*p56)*(2*p54*X[i][10] + p56*X[i][11] - p52*X[i][12] + p57*X[i][12]))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
        D[i][12][11] = ((p53*p54 - p52*p56)*(-p46 + p56*X[i][10] - p53*X[i][12]) + (-pow(p53,2) + p52*p55)*(p52*X[i][10] - p55*X[i][10] + 2*p53*X[i][11] + p54*X[i][12]) + (-(p54*p55) + p53*p56)*(-(p54*X[i][10]) - 2*p56*X[i][11] + p55*X[i][12] - p57*X[i][12]))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
        D[i][12][12] = ((-pow(p53,2) + p52*p55)*(-p47 - p56*X[i][10] + p54*X[i][11]) + (p53*p54 - p52*p56)*(-(p52*X[i][10]) + p57*X[i][10] - p53*X[i][11] - 2*p54*X[i][12]) + (-(p54*p55) + p53*p56)*(p53*X[i][10] + p55*X[i][11] - p57*X[i][11] + 2*p56*X[i][12]))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    }
    return 0;
}

// Places the dynamics input-jacobian into D (this matrix is a constant)
extern "C" int dfdu(double D[13][6]){
    D[0][0] = 0;
    D[0][1] = 0;
    D[0][2] = 0;
    D[0][3] = 0;
    D[0][4] = 0;
    D[0][5] = 0;
    D[1][0] = 0;
    D[1][1] = 0;
    D[1][2] = 0;
    D[1][3] = 0;
    D[1][4] = 0;
    D[1][5] = 0;
    D[2][0] = 0;
    D[2][1] = 0;
    D[2][2] = 0;
    D[2][3] = 0;
    D[2][4] = 0;
    D[2][5] = 0;
    D[3][0] = 0;
    D[3][1] = 0;
    D[3][2] = 0;
    D[3][3] = 0;
    D[3][4] = 0;
    D[3][5] = 0;
    D[4][0] = 0;
    D[4][1] = 0;
    D[4][2] = 0;
    D[4][3] = 0;
    D[4][4] = 0;
    D[4][5] = 0;
    D[5][0] = 0;
    D[5][1] = 0;
    D[5][2] = 0;
    D[5][3] = 0;
    D[5][4] = 0;
    D[5][5] = 0;
    D[6][0] = 0;
    D[6][1] = 0;
    D[6][2] = 0;
    D[6][3] = 0;
    D[6][4] = 0;
    D[6][5] = 0;
    D[7][0] = p0/p51;
    D[7][1] = p1/p51;
    D[7][2] = p2/p51;
    D[7][3] = p3/p51;
    D[7][4] = p4/p51;
    D[7][5] = p5/p51;
    D[8][0] = p6/p51;
    D[8][1] = p7/p51;
    D[8][2] = p8/p51;
    D[8][3] = p9/p51;
    D[8][4] = p10/p51;
    D[8][5] = p11/p51;
    D[9][0] = p12/p51;
    D[9][1] = p13/p51;
    D[9][2] = p14/p51;
    D[9][3] = p15/p51;
    D[9][4] = p16/p51;
    D[9][5] = p17/p51;
    D[10][0] = ((p30 + p12*p36)*(-(p54*p55) + p53*p56) + (p18 + p0*p36)*(-pow(p56,2) + p55*p57) + (p54*p56 - p53*p57)*(p24 + p36*p6))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[10][1] = ((p31 + p13*p37)*(-(p54*p55) + p53*p56) + (p19 + p1*p37)*(-pow(p56,2) + p55*p57) + (p54*p56 - p53*p57)*(p25 + p37*p7))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[10][2] = ((p32 + p14*p38)*(-(p54*p55) + p53*p56) + (p20 + p2*p38)*(-pow(p56,2) + p55*p57) + (p54*p56 - p53*p57)*(p26 + p38*p8))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[10][3] = ((p33 + p15*p39)*(-(p54*p55) + p53*p56) + (p21 + p3*p39)*(-pow(p56,2) + p55*p57) + (p54*p56 - p53*p57)*(p27 + p39*p9))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[10][4] = ((p34 + p16*p40)*(-(p54*p55) + p53*p56) + (p28 + p10*p40)*(p54*p56 - p53*p57) + (p22 + p4*p40)*(-pow(p56,2) + p55*p57))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[10][5] = ((p35 + p17*p41)*(-(p54*p55) + p53*p56) + (p29 + p11*p41)*(p54*p56 - p53*p57) + (p23 + p41*p5)*(-pow(p56,2) + p55*p57))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[11][0] = ((p30 + p12*p36)*(p53*p54 - p52*p56) + (p18 + p0*p36)*(p54*p56 - p53*p57) + (-pow(p54,2) + p52*p57)*(p24 + p36*p6))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[11][1] = ((p31 + p13*p37)*(p53*p54 - p52*p56) + (p19 + p1*p37)*(p54*p56 - p53*p57) + (-pow(p54,2) + p52*p57)*(p25 + p37*p7))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[11][2] = ((p32 + p14*p38)*(p53*p54 - p52*p56) + (p20 + p2*p38)*(p54*p56 - p53*p57) + (-pow(p54,2) + p52*p57)*(p26 + p38*p8))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[11][3] = ((p33 + p15*p39)*(p53*p54 - p52*p56) + (p21 + p3*p39)*(p54*p56 - p53*p57) + (-pow(p54,2) + p52*p57)*(p27 + p39*p9))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[11][4] = ((p34 + p16*p40)*(p53*p54 - p52*p56) + (p28 + p10*p40)*(-pow(p54,2) + p52*p57) + (p22 + p4*p40)*(p54*p56 - p53*p57))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[11][5] = ((p35 + p17*p41)*(p53*p54 - p52*p56) + (p29 + p11*p41)*(-pow(p54,2) + p52*p57) + (p23 + p41*p5)*(p54*p56 - p53*p57))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[12][0] = ((p30 + p12*p36)*(-pow(p53,2) + p52*p55) + (p18 + p0*p36)*(-(p54*p55) + p53*p56) + (p53*p54 - p52*p56)*(p24 + p36*p6))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[12][1] = ((p31 + p13*p37)*(-pow(p53,2) + p52*p55) + (p19 + p1*p37)*(-(p54*p55) + p53*p56) + (p53*p54 - p52*p56)*(p25 + p37*p7))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[12][2] = ((p32 + p14*p38)*(-pow(p53,2) + p52*p55) + (p20 + p2*p38)*(-(p54*p55) + p53*p56) + (p53*p54 - p52*p56)*(p26 + p38*p8))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[12][3] = ((p33 + p15*p39)*(-pow(p53,2) + p52*p55) + (p21 + p3*p39)*(-(p54*p55) + p53*p56) + (p53*p54 - p52*p56)*(p27 + p39*p9))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[12][4] = ((p34 + p16*p40)*(-pow(p53,2) + p52*p55) + (p28 + p10*p40)*(p53*p54 - p52*p56) + (p22 + p4*p40)*(-(p54*p55) + p53*p56))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    D[12][5] = ((p35 + p17*p41)*(-pow(p53,2) + p52*p55) + (p29 + p11*p41)*(p53*p54 - p52*p56) + (p23 + p41*p5)*(-(p54*p55) + p53*p56))/(-(pow(p54,2)*p55) + 2*p53*p54*p56 - p52*pow(p56,2) - pow(p53,2)*p57 + p52*p55*p57);
    return 0;
}

// Useful notato:
// RegEx for changing Mathematica call notation to C++ indexing:  x\((\d+)\)  ->  X[i][\1]
