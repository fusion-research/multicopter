#!/usr/bin/python
"""
Script for ~iNtErAcTiVe~ realtime multicopter simulation.
See pilot.py for X-Box gamepad installation instructions.
See viz.py for Mayavi graphics installation instructions.

"""
from __future__ import division
import numpy as np; npl = np.linalg

from multicopter.pilot import Pilot
from multicopter.bois import hexboi as model
from multicopter.viz import Viz
from multicopter import motion

# Graphics / environment config
building_spacing = 3
building_size = (3, 3, 4)
building_layout = [[1, 1, 1, 1],
                   [1, 0, 1, 1],
                   [1, 1, 0, 1],
                   [1, 1, 1, 1]]
viz = Viz(model, building_layout, building_size, building_spacing)

# User button press callbacks
def bcb_A(val):  # toggle camera following
    global follow
    if val:
        if follow: follow = 0
        else: follow = 15
def bcb_B(val):  # reset state
    global state
    if val:
        state = state0.copy()
        pilot.cmd.reset(state0)

# User piloting config
kp = [0, 0.5, 0.5, 0.5]  # [world_up, roll, pitch, yaw]
kd = [10, 0.1, 0.1, 0.1]
pilot = Pilot(model, kp, kd, button_callbacks={"A": bcb_A, "B": bcb_B})

# Scheduled external disturbance wrench
wind = lambda t: None

# Initial condition
state0 = motion.State(motion.Pose([0, 0, 5], [0, 0, 0, 1]),
                      motion.Twist([0, 0, 0], [0, 0, 0]),
                      0.0)
state = state0.copy()
follow = 15

# Simulation loop function
dt = 0.05
@viz.animate(delay=int(dt*1000))
def simulate():
    global state
    while True:
        efforts = pilot.control(state)
        state = model.compute_next_state(state, efforts, dt, wind(state.time))
        if state.pose.lin[2] < -0.05: state.pose.lin[2] = 0  # basic ground plane
        viz.update_multicopter(state, efforts, follow)
        yield

# Start'er up
pilot.start_pilot_thread(state0)
simulate()
viz.show()  # blocking

# Be nice
pilot.stop_pilot_thread()
